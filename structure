####A JSON file is a database, a database of unstructured data so think of it in that manner#####


##Good####

{
   
    "pets": [
    
    {
    
        "type": "dog",
        "Name": "Fido"
    },
    
    {
    
        "type": "cat",
        "Name":  "Kitten"
    },
    
    {
       "type": "horse",
       "Name": "Secretariat"
    }
    
  ]
}




##Bad##

{
  "Bad": {

   "pets": [
   
     {
        "type": "dog",
        "Name": "Fido"
     },
   ],
   
   "cars": [
   {
   
      "Make": "Honda"
   }
  ]
 }
 }
   
 ##the first object has uniform data while the second has a mixture
 ##of data, pets and cars and the key:value pairs are different
 #which in the case of PowerShell would return odd results 
 
 $bad = Invoke-RestMethod -URI http://1.1.1.1/Bad/
 
 
 
 ##Great example
 
 
 {
  "colors": [
    {
      "color": "black",
      "category": "hue",
      "type": "primary",
      "code": {
        "rgba": [255,255,255,1],
        "hex": "#000"
      }
    },
    {
      "color": "white",
      "category": "value",
      "code": {
        "rgba": [0,0,0,1],
        "hex": "#FFF"
      }
    },
    {
      "color": "red",
      "category": "hue",
      "type": "primary",
      "code": {
        "rgba": [255,0,0,1],
        "hex": "#FF0"
      }
    },
    {
      "color": "blue",
      "category": "hue",
      "type": "primary",
      "code": {
        "rgba": [0,0,255,1],
        "hex": "#00F"
      }
    },
    {
      "color": "yellow",
      "category": "hue",
      "type": "primary",
      "code": {
        "rgba": [255,255,0,1],
        "hex": "#FF0"
      }
    },
    {
      "color": "green",
      "category": "hue",
      "type": "secondary",
      "code": {
        "rgba": [0,255,0,1],
        "hex": "#0F0"
      }
    }, #is that comma correct? Theirs no more data??
  ]
}



##Great example
##Ref:https://www.sitepoint.com/colors-json-example/


{
  "aliceblue": "#f0f8ff",
  "antiquewhite": "#faebd7",
  "aqua": "#00ffff",
  "aquamarine": "#7fffd4",
  "azure": "#f0ffff",
  "beige": "#f5f5dc",
  "bisque": "#ffe4c4",
  "black": "#000000",
  "blanchedalmond": "#ffebcd",
  "blue": "#0000ff",
  "blueviolet": "#8a2be2",
  "brown": "#a52a2a",
}

{
  "aliceblue": [240, 248, 255, 1],
  "antiquewhite": [250, 235, 215, 1],
  "aqua": [0, 255, 255, 1],
  "aquamarine": [127, 255, 212, 1],
  "azure": [240, 255, 255, 1],
  "beige": [245, 245, 220, 1],
  "bisque": [255, 228, 196, 1],
  "black": [0, 0, 0, 1],
  "blanchedalmond": [255, 235, 205, 1],
  "blue": [0, 0, 255, 1],
  "blueviolet": [138, 43, 226, 1],
  "brown": [165, 42, 42, 1],
  "burlywood": [222, 184, 135, 1],
  "cadetblue": [95, 158, 160, 1],
  "chartreuse": [127, 255, 0, 1],
  "chocolate": [210, 105, 30, 1],
  "coral": [255, 127, 80, 1],
}



##Filter examples from an API browser i.e "Talend" or something like postman#####

GET /posts?title=json-server&author=typicode
GET /posts?id=1&id=2
GET /comments?author.name=typicode

##Or from our example above


/colors?code.type=primary

/colors?name=Black


####Note this gives me an issue#####

{

    "all": {
    
        "colors": [
        {
           "blah": "blah"
        },
        {
           "blah2": "blah2"
        }
      ]
    }
  }
  
  ##but this works no issue####
  
  {

    
        "colors": [
        {
           "blah": "blah"
        },
        {
           "blah2": "blah2"
        }
      ]
    }



 
   
